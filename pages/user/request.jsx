import React, { useState, useEffect } from "react";

import Head from "next/head";
import styles from "../../styles/Demo.module.css";
import referralCodeGenerator from "referral-code-generator";
import RingSpinner from "../../components/loaders/ringSpinner";
import baseUrl from "../../components/baseUrl";
import { ethers } from "ethers";
import Axios from "axios";
import { redirect } from "next/dist/server/api-utils";
import { useRouter } from "next/router";
// import { redirect } from "next/navigation";
// import { Chat } from "@pushprotocol/uiweb";

export default function Request() {
  const [showModal, setShowModal] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [description, setDescription] = useState("");
  const [windowLocation, setWindowLocation] = useState("");
  const [provider, setProvider] = useState();
  const router = useRouter();
  const checkIfWalletIsConnected = async () => {
    return provider?.listAccounts().then((accounts) => {
      if (accounts.length > 0) {
        console.log(`Wallet is connected with address: ${accounts[0]}`);
        return 1;
      } else {
        console.log("Wallet is not connected");
        return 0;
      }
    });
  };
  const getConnectedAddress = async () => {
    try {
      // Get the signer
      const signer = provider.getSigner();

      // Get the connected address
      const address = await signer.getAddress();

      return address;
    } catch (error) {
      console.error(error);
      return null;
    }
  };
  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);
    let address = await getConnectedAddress();

    let req_id = referralCodeGenerator.custom("uppercase", 5, 8, "CHAOSS");

    let obj = {
      req_id: req_id,
      url: windowLocation,
      request_address: address,
      description: description,
    };

    // console.log(windowLocation);

    Axios.post(`${baseUrl}/api/post`, obj)
      .then(() => {
        setSubmitting(false);
        setShowModal(false);
        router.push(`/chat/${req_id}`);
      })
      .catch((err) => {
        console.log(err);
        alert("An error occurred, please try again");
      });
  };
  useEffect(() => {
    if (typeof window.ethereum !== undefined) {
      // window.ethereum is defined
      setProvider(new ethers.providers.Web3Provider(window.ethereum));
      setWindowLocation(window.location.href);
    } else {
      // window.ethereum is undefined
      console.log();
    }
  }, []);

  return (
    <div>
      <Head>
        <title>ChainAid | Request</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.page}></div>
        <button
          className={styles.button}
          onClick={async () => {
            let walletConnected = await checkIfWalletIsConnected();
            if (walletConnected == 1) {
              setShowModal(true);
            } else {
              setSubmitting(false);

              setShowModal(false);
              alert("Connect to wallet!");
            }
          }}
        >
          Help?
        </button>
      </main>
      {showModal ? (
        <>
          <div className="flex justify-center items-center overflow-x-hidden overflow-y-auto fixed inset-0 z-50 outline-none focus:outline-none">
            <div className="relative w-auto my-6 mx-auto max-w-3xl">
              <div className="border-0 rounded-lg shadow-lg relative flex flex-col w-full bg-white outline-none focus:outline-none">
                {submitting == false ? (
                  <>
                    <div className="flex items-start justify-between p-5 border-b border-solid border-gray-300 rounded-t ">
                      <h3 className="text-xl font-semibold text-black uppercase">
                        Request support
                      </h3>
                      <button
                        className="bg-transparent border-0 text-black float-right"
                        onClick={() => setShowModal(false)}
                      >
                        <span className="text-black opacity-7 h-6 w-6 text-xl block bg-gray-400 p-0 rounded-full">
                          x
                        </span>
                      </button>
                    </div>
                    <div className="relative p-1 flex-auto">
                      <form className="bg-gray-200 shadow-md rounded px-1 pt-6 pb-8 w-full">
                        <label className="block text-black text-sm font-bold mb-1">
                          Your query
                        </label>
                        <input
                          type="textarea"
                          rows={10}
                          onChange={(e) => setDescription(e.target.value)}
                          className="shadow appearance-none border rounded w-full py-2 px-1 text-black"
                        />
                      </form>
                    </div>
                    <div className="flex items-center justify-end p-6 border-t border-solid border-blueGray-200 rounded-b">
                      <button
                        className="text-red-500 background-transparent font-bold uppercase px-6 py-2 text-sm outline-none focus:outline-none mr-1 mb-1"
                        type="button"
                        onClick={() => setShowModal(false)}
                      >
                        Close
                      </button>
                      <button
                        className="text-white bg-yellow-500 active:bg-yellow-700 font-bold uppercase text-sm px-6 py-3 rounded shadow hover:shadow-lg outline-none focus:outline-none mr-1 mb-1"
                        type="button"
                        onClick={(e) => handleSubmit(e)}
                      >
                        Submit
                      </button>
                    </div>
                  </>
                ) : (
                  <div className="m-2 p-7">
                    <RingSpinner width={50} color="black" />
                  </div>
                )}
              </div>
            </div>
          </div>
        </>
      ) : null}
    </div>
  );
}
